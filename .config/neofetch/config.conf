#!/usr/bin/env bash
# minimalist cyberpunk neofetch config

# source: ascii art style
print_info() {
    info title
    info underline
    
    # core system info - lowercase hacker vibe
    info "host" model
    info "os" distro  
    info "kernel" kernel
    info "uptime" uptime
    info "shell" shell
    info "term" term
    info "cpu" cpu
    info "memory" memory
    info "gpu" gpu
    info "resolution" resolution
    
    prin ""
    
    # custom integrations from sketchybar/startup scripts
    prin "$(tput setaf 8)// cyberdeck stats$(tput sgr0)"
    
    # typing speed from monkeytype api
    typing_stats=$(curl -s --max-time 2 "https://ejfox.com/api/monkeytype" 2>/dev/null | jq -r '.typingStats.bestWPM // "n/a"' 2>/dev/null || echo "n/a")
    prin "wpm" "$typing_stats"
    
    # active git repos with changes
    active_repos=$(find ~/code -maxdepth 1 -type d -exec test -d "{}/.git" \; -print | wc -l | tr -d ' ')
    modified_repos=$(find ~/code -maxdepth 1 -type d -exec sh -c 'cd "$1" && test -d .git && [ -n "$(git status --porcelain 2>/dev/null)" ]' _ {} \; -print | wc -l | tr -d ' ')
    prin "repos" "${modified_repos}/${active_repos} modified"
    
    # today's tasks count
    if command -v things-cli >/dev/null 2>&1; then
        task_count=$(things-cli today 2>/dev/null | wc -l | tr -d ' ' || echo "0")
        prin "tasks" "$task_count today"
    fi
    
    # word count from startup script
    word_count=$(curl -s --max-time 2 "https://ejfox.com/api/words/today" 2>/dev/null | jq -r '.count // "0"' 2>/dev/null || echo "0")
    prin "words" "$word_count today"
    
    # obsidian notes count
    obsidian_root="$HOME/Library/Mobile Documents/iCloud~md~obsidian/Documents/ejfox"
    if [ -d "$obsidian_root" ]; then
        note_count=$(find "$obsidian_root" -name "*.md" -not -path '*/\.*' | wc -l | tr -d ' ')
        prin "notes" "$note_count total"
    fi
    
    # LIFE PROGRESS BAR (prominent placement!)
    birth_year=1992
    current_year=$(date +%Y)
    current_age=$((current_year - birth_year))
    life_expectancy=76.1
    life_percent=$(echo "scale=1; $current_age / $life_expectancy * 100" | bc)
    # create a progress bar
    filled=$(echo "scale=0; $life_percent / 5" | bc)  # each block = 5%
    empty=$((20 - filled))
    bar=""
    for i in $(seq 1 $filled); do bar="${bar}‚ñà"; done
    for i in $(seq 1 $empty); do bar="${bar}‚ñë"; done
    prin "üíÄ life" "${life_percent}% [${bar}] ${current_age}/${life_expectancy}y"
    
    prin ""
    prin "$(tput setaf 8)// macbook stats$(tput sgr0)"
    
    # battery percentage (simple and fast)
    battery_percent=$(pmset -g batt 2>/dev/null | grep -Eo "\d+%" | head -1 | cut -d% -f1 || echo "")
    if [ ! -z "$battery_percent" ]; then
        prin "battery" "${battery_percent}%"
    fi
    
    # disk usage (fast)
    disk_usage=$(df -h / 2>/dev/null | awk 'NR==2{printf "%s used", $5}' || echo "unknown")
    prin "disk" "$disk_usage"
    
    prin ""
    prin "$(tput setaf 8)// cyberdeck stats$(tput sgr0)"
    
    # current moon phase üåô (more reliable calculation)
    day_of_year=$(date +%j)
    year=$(date +%Y)
    # Simple moon phase calculation based on date
    moon_cycle=$((($day_of_year + ($year % 4) * 91) % 29))
    if [ $moon_cycle -lt 2 ]; then moon_emoji="üåë"; moon_name="new"
    elif [ $moon_cycle -lt 7 ]; then moon_emoji="üåí"; moon_name="waxing crescent"  
    elif [ $moon_cycle -lt 9 ]; then moon_emoji="üåì"; moon_name="first quarter"
    elif [ $moon_cycle -lt 14 ]; then moon_emoji="üåî"; moon_name="waxing gibbous"
    elif [ $moon_cycle -lt 16 ]; then moon_emoji="üåï"; moon_name="full"
    elif [ $moon_cycle -lt 21 ]; then moon_emoji="üåñ"; moon_name="waning gibbous"
    elif [ $moon_cycle -lt 23 ]; then moon_emoji="üåó"; moon_name="last quarter"
    else moon_emoji="üåò"; moon_name="waning crescent"
    fi
    prin "lunar" "$moon_emoji $moon_name"
    
    # time until your next birthday (because hackers need cake)
    birth_month="10"  # october
    birth_day="27"    # 27th
    today=$(date +%j)
    this_year=$(date +%Y)
    birthday_this_year=$(date -j -f "%Y-%m-%d" "${this_year}-${birth_month}-${birth_day}" +%j 2>/dev/null || echo "0")
    if [ "$today" -gt "$birthday_this_year" ]; then
        next_year=$((this_year + 1))
        birthday_next_year=$(date -j -f "%Y-%m-%d" "${next_year}-${birth_month}-${birth_day}" +%j 2>/dev/null || echo "0")
        days_to_birthday=$((365 - today + birthday_next_year))
    else
        days_to_birthday=$((birthday_this_year - today))
    fi
    prin "cake" "${days_to_birthday}d until üéÇ"
    
    prin ""
    prin "$(tput setaf 8)// end transmission$(tput sgr0)"
}

# remove title
title_fqdn="off"

# kernel settings
kernel_shorthand="on"

# distro settings
distro_shorthand="off"

# os settings
os_arch="off"

# uptime settings
uptime_shorthand="on"

# memory settings
memory_percent="on"
memory_unit="gib"

# package settings
package_managers="on"

# shell settings
shell_path="off"
shell_version="on"

# cpu settings
speed_type="bios_limit"
speed_shorthand="on"
cpu_brand="off"
cpu_speed="off"
cpu_cores="logical"
cpu_temp="off"

# gpu settings
gpu_brand="off"
gpu_type="all"

# resolution settings
refresh_rate="on"

# color blocks
block_range=(0 15)
block_width=3
block_height=1

# colors
colors=(8 15 7 1 3 4 5 6 2)

# text options
bold="off"
underline_enabled="on"
underline_char="‚îÄ"
separator=" ‚ùØ "

# color blocks
color_blocks="off"

# progress bars
bar_char_elapsed="‚îÅ"
bar_char_total="‚îÄ"
bar_border="off"
bar_length=15
bar_color_elapsed="7"
bar_color_total="8"

# backend settings
image_backend="ascii"
image_source="



      üçé






"

# ascii settings
ascii_distro="custom"
ascii_colors=(8 7)
ascii_bold="off"

# image settings
crop_mode="normal"
crop_offset="center"

# gap settings
gap=6

# misc options
stdout="off"